package com.microservice.api_gateway.config;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
import org.springframework.security.config.web.server.ServerHttpSecurity;
import org.springframework.security.core.userdetails.ReactiveUserDetailsService;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.server.SecurityWebFilterChain;
import org.springframework.security.web.server.authentication.RedirectServerAuthenticationSuccessHandler;
import org.springframework.security.web.server.authentication.RedirectServerAuthenticationFailureHandler;

@Configuration
@EnableWebFluxSecurity  
public class ApiGatewaySecurityConfig {

    @Bean
    public SecurityWebFilterChain securityFilterChain(ServerHttpSecurity http, ReactiveUserDetailsService userDetailsService) throws Exception {
        http
                .csrf().disable()  
                .authorizeExchange(authorize -> authorize
                        // Permit login and signup
                        .pathMatchers(HttpMethod.POST, "/login", "/signup").permitAll()
                        // Swagger and api-docs
                        .pathMatchers(
                                "/user-service/swagger-ui/**", "/user-service/api-docs/**", "/user-service/v3/api-docs/**", "/user-service/swagger-ui.html",
                                "/product-service/swagger-ui/**", "/product-service/api-docs/**", "/product-service/v3/api-docs/**", "/product-service/swagger-ui.html",
                                "/order-service/swagger-ui/**", "/order-service/api-docs/**", "/order-service/v3/api-docs/**", "/order-service/swagger-ui.html","v3/api-docs/**"
                        ).permitAll()
                        
                        // Admin-only: add/delete products, update user to admin
                        .pathMatchers("/products").hasRole("ADMIN")  
                        .pathMatchers("/products/**").hasRole("ADMIN")  
                        .pathMatchers("/users/**/make-admin").hasRole("ADMIN")  // NEW: For admin upgrade
                        
                        // Customer/Admin: place orders
                        .pathMatchers("/orders").hasAnyRole("CUSTOMER", "ADMIN")
                        
                        // All authenticated: get users/orders/products
                        .pathMatchers("/users/**", "/orders/**", "/products/**").authenticated()
                        
                        // Any other requests require auth
                        .anyExchange().authenticated()
                )
                .formLogin(form -> form
                        .loginPage("/login")  // POST /login for credentials (form-data: username, password)
                        .authenticationSuccessHandler(new RedirectServerAuthenticationSuccessHandler("/"))  // Redirect on success
                        .authenticationFailureHandler(new RedirectServerAuthenticationFailureHandler("/login?error=true"))  // On failure
                )
                .logout(logout -> logout
                        .logoutUrl("/logout")
                );

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return NoOpPasswordEncoder.getInstance();  // No encoding, plain text
    }

    @Bean
    @ConfigurationProperties(prefix = "admin")
    public AdminCredentials adminCredentials() {
        return new AdminCredentials();
    }

    @Bean
    public ReactiveUserDetailsService userDetailsService(AdminCredentials adminCredentials) {
        return new CustomUserDetailsService(adminCredentials);
    }

    // Inner class for admin props
    public static class AdminCredentials {
        private String username;
        private String password;

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }
    }
}