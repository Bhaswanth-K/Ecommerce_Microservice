package com.microservice.order_service.controller;

import com.microservice.order_service.model.OrderModel;
import com.microservice.order_service.model.OrderStatus;
import com.microservice.order_service.service.OrderService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(OrderController.class)
class OrderControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private OrderService orderService;

    @Test
    void placeOrder_success() throws Exception {
        Map<Long, Integer> items = new HashMap<>();
        items.put(1L, 2);
        OrderModel order = new OrderModel(1L, 1L, items, 20.0, OrderStatus.PLACED);
        when(orderService.placeOrder(any(OrderModel.class))).thenReturn(order);

        mockMvc.perform(post("/orders")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"userId\":1, \"orderItems\":{\"1\":2}}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.totalPrice").value(20.0));
    }

    @Test
    void getAllOrders_success() throws Exception {
        Map<Long, Integer> items = new HashMap<>();
        items.put(1L, 2);
        List<OrderModel> orders = List.of(new OrderModel(1L, 1L, items, 20.0, OrderStatus.PLACED));
        when(orderService.getAllOrders()).thenReturn(orders);

        mockMvc.perform(get("/orders"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].userId").value(1));
    }

    @Test
    void getOrderById_success() throws Exception {
        Map<Long, Integer> items = new HashMap<>();
        items.put(1L, 2);
        OrderModel order = new OrderModel(1L, 1L, items, 20.0, OrderStatus.PLACED);
        when(orderService.getOrderById(1L)).thenReturn(order);

        mockMvc.perform(get("/orders/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.userId").value(1));
    }

    @Test
    void getOrdersByUserId_success() throws Exception {
        Map<Long, Integer> items = new HashMap<>();
        items.put(1L, 2);
        List<OrderModel> orders = List.of(new OrderModel(1L, 1L, items, 20.0, OrderStatus.PLACED));
        when(orderService.getOrdersByUserId(1L)).thenReturn(orders);

        mockMvc.perform(get("/orders/user/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].userId").value(1));
    }
}